{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","state","text","handleChange","event","_this","setState","Object","defineProperty","target","name","value","handleSubmit","preventDefault","props","onSubmit","id","shortid","generate","done","react_default","a","createElement","this","className","placeholder","onChange","onClick","Component","components_Todo","style","display","justifyContent","textDecoration","todo","toggleDone","onDelete","TodoList","todos","todoToShow","toggleAllDone","addTodo","concat","toConsumableArray","map","objectSpread","updateTodoToShow","input","handleDeleteTodo","filter","removeAllDoneTodo","_this2","TodoForm_TodoForm","key","length","some","App","TodoList_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f7318d16.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport shortid from \"shortid\";\r\nimport \"./TodoForm.css\";\r\n\r\nexport default class TodoForm extends Component {\r\n  state = {\r\n    text: \"\"\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value //\r\n    });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    if (this.state.text) {\r\n      this.props.onSubmit({\r\n        id: shortid.generate(),\r\n        text: this.state.text,\r\n        done: false\r\n      });\r\n      this.setState({\r\n        text: \"\"\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input\r\n          className=\"input-field\"\r\n          name=\"text\"\r\n          placeholder=\"What needs to be done?\"\r\n          value={this.state.text}\r\n          onChange={this.handleChange}\r\n        />\r\n        <button className=\"add-todo-button\" onClick={this.handleSubmit}>\r\n          Add Todo\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport \"./Todo.css\";\r\n\r\nexport default props => (\r\n  <div className=\"todo\" style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n    <div\r\n      className=\"todo-text\"\r\n      style={{\r\n        textDecoration: props.todo.done ? \"line-through\" : \"\"\r\n      }}\r\n      onClick={props.toggleDone}\r\n    >\r\n      {props.todo.text}\r\n    </div>\r\n    <i className=\"fa fa-trash todo-delete-icon\" onClick={props.onDelete} />\r\n  </div>\r\n);\r\n","import React, { Component } from \"react\";\r\nimport \"./TodoList.css\";\r\nimport TodoForm from \"./TodoForm\";\r\nimport Todo from \"./Todo\";\r\n\r\nexport default class TodoList extends Component {\r\n  state = {\r\n    todos: [],\r\n    todoToShow: \"all\",\r\n    toggleAllDone: true\r\n  };\r\n\r\n  addTodo = todo => {\r\n    this.setState(state => ({\r\n      todos: [todo, ...state.todos]\r\n    }));\r\n  };\r\n\r\n  toggleDone = id => {\r\n    this.setState(state => ({\r\n      todos: state.todos.map(todo => {\r\n        if (todo.id === id) {\r\n          return {\r\n            ...todo,\r\n            done: !todo.done\r\n          };\r\n        } else {\r\n          return todo;\r\n        }\r\n      })\r\n    }));\r\n  };\r\n\r\n  updateTodoToShow = input => {\r\n    this.setState({\r\n      todoToShow: input\r\n    });\r\n  };\r\n\r\n  handleDeleteTodo = id => {\r\n    this.setState(state => ({\r\n      todos: state.todos.filter(todo => todo.id !== id)\r\n    }));\r\n  };\r\n\r\n  removeAllDoneTodo = () => {\r\n    this.setState(state => ({\r\n      todos: state.todos.filter(todo => !todo.done)\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    let todos = [];\r\n\r\n    if (this.state.todoToShow === \"all\") {\r\n      todos = this.state.todos;\r\n    } else if (this.state.todoToShow === \"active\") {\r\n      todos = this.state.todos.filter(todo => !todo.done);\r\n    } else if (this.state.todoToShow === \"done\") {\r\n      todos = this.state.todos.filter(todo => todo.done);\r\n    }\r\n\r\n    return (\r\n      <div className=\"todo-list\">\r\n        <h1>TODOS</h1>\r\n        <TodoForm onSubmit={this.addTodo} />\r\n        {todos.map(todo => (\r\n          <Todo\r\n            key={todo.id}\r\n            toggleDone={() => this.toggleDone(todo.id)}\r\n            todo={todo}\r\n            onDelete={() => this.handleDeleteTodo(todo.id)}\r\n          />\r\n        ))}\r\n\r\n        <div className=\"footer\">\r\n          <div className=\"todo-left\">\r\n            Todo Left: {this.state.todos.filter(todo => !todo.done).length}\r\n          </div>\r\n          <div className=\"all-active-done\">\r\n            <button\r\n              className=\"all\"\r\n              onClick={() => this.updateTodoToShow(\"all\")}\r\n            >\r\n              All\r\n            </button>\r\n            <button\r\n              className=\"active\"\r\n              onClick={() => this.updateTodoToShow(\"active\")}\r\n            >\r\n              Active\r\n            </button>\r\n            <button\r\n              className=\"done\"\r\n              onClick={() => this.updateTodoToShow(\"done\")}\r\n            >\r\n              Done\r\n            </button>\r\n          </div>\r\n          <div className=\"toggle-all\">\r\n            <button\r\n              className=\"toggle-all-btn\"\r\n              onClick={() =>\r\n                this.setState(state => ({\r\n                  todos: state.todos.map(todo => ({\r\n                    ...todo,\r\n                    done: state.toggleAllDone\r\n                  })),\r\n                  toggleAllDone: !state.toggleAllDone\r\n                }))\r\n              }\r\n            >\r\n              Toggle All Done: {`${this.state.toggleAllDone}`}\r\n            </button>\r\n          </div>\r\n        </div>\r\n        {this.state.todos.some(todo => todo.done) ? (\r\n          <div>\r\n            <button\r\n              className=\"remove-all-done-btn\"\r\n              onClick={this.removeAllDoneTodo}\r\n            >\r\n              <i className=\"fa fa-trash delete-icon\" />\r\n              Remove All Completed Todo\r\n            </button>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport TodoList from \"./components/TodoList\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <TodoList />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}